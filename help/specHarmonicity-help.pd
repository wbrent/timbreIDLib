#N canvas 166 86 908 735 10;
#X declare -lib timbreID/timbreIDLib;
#X obj 40 120 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-waveform 4096 float 0;
#X coords 0 1 4095 -1 200 140 1 0 0;
#X restore 637 137 graph;
#X text 62 117 Bang to analyze the entire array.;
#N canvas 1143 422 670 297 soundfile 0;
#X obj 50 163 soundfiler;
#X obj 50 24 loadbang;
#X obj 408 249 table \$0-sample 130000;
#X msg 50 78 read -skip 120000 ./audio/testing.wav \$1-sample;
#X obj 50 46 f \$0;
#X obj 390 47 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 390 67 openpanel;
#X obj 390 89 pack s \$0;
#X msg 390 111 read -resize \$1 \$2-sample;
#X obj 50 210 pack f \$0;
#X msg 50 232 \; \$2-scrub-bar-set range 0 \$1;
#X obj 50 185 - 4096;
#X connect 0 0 11 0;
#X connect 1 0 4 0;
#X connect 3 0 0 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 0 0;
#X connect 9 0 10 0;
#X connect 11 0 9 0;
#X restore 637 297 pd soundfile;
#N canvas 722 238 304 333 waveform 0;
#X obj 46 61 inlet;
#X obj 46 82 t f f;
#X msg 46 200 copy_range 0 \$3-sample \$1 \$2;
#X obj 46 164 pack f f \$0;
#X obj 46 241 tabletool \$0-waveform;
#X obj 91 131 + 4095;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 1 1 5 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 5 0 3 1;
#X restore 637 349 pd waveform;
#X obj 40 53 hsl 800 25 0 125904 0 0 \$0-scrub-bar \$0-scrub-bar-set
Scrub-bar -2 -8 0 12 -191407 -1 -1 0 1;
#X obj 3 3 cnv 10 400 10 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 3 3 cnv 10 10 400 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 611 185 886 721 other-settings 0;
#X obj 44 56 hradio 15 1 0 5 empty empty empty 0 -8 0 10 -262144 -1
-1 4;
#X msg 44 76 window_function \$1;
#X msg 100 138 set another-sample-array;
#X msg 139 194 samplerate 48000;
#X text 288 137 Read from a different array;
#X msg 165 247 power_spectrum \$1;
#X obj 165 229 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 44 645 outlet;
#X text 273 193 Specify your sample's sampling rate. (default: 44100)
;
#X text 306 247 Use power spectrum. (default: magnitude);
#X msg 345 527 print;
#X text 42 19 Change windowing function. Rectangular (0) \, Blackman
(1) \, Cosine (2) \, Hamming (3) \, or Hann (4). (default: Blackman)
;
#X text 395 529 Print current settings in the post window;
#X obj 315 447 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X msg 315 467 input_fund \$1;
#X msg 195 287 peak_thresh 10;
#X msg 225 327 max_peaks 12;
#X msg 255 367 min_fund 100;
#X msg 285 407 max_fund 2000;
#X text 316 280 Threshold for detecting spectral peaks in percent relative
to the maximum peak amplitude. (default: 5%);
#X text 331 327 Maximum number of peaks to consider. (default: 24)
;
#X text 361 367 Minimum allowed fundamental frequency. (default: 30)
;
#X text 401 407 Maximum allowed fundamental frequency. (default: 4000)
;
#X text 431 447 Flag to use fundamental frequency data supplied to
the right inlet (by using the pitch output of sigmund~ \, for instance).
When off \, the first significant spectral peak is assumed to be the
fundamental. (default: OFF);
#X text 176 106 Change internal window size setting;
#X msg 74 106 window 2000;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 7 0;
#X connect 3 0 7 0;
#X connect 5 0 7 0;
#X connect 6 0 5 0;
#X connect 10 0 7 0;
#X connect 13 0 14 0;
#X connect 14 0 7 0;
#X connect 15 0 7 0;
#X connect 16 0 7 0;
#X connect 17 0 7 0;
#X connect 18 0 7 0;
#X connect 25 0 7 0;
#X restore 137 429 pd other-settings;
#X msg 84 189 analyze 44100 2000;
#X text 93 149 Analyze a window starting at sample 44100 that is 2000
samples long (samples 44100 - 46099;
#X obj 117 243 r \$0-scrub-bar;
#X obj 637 327 r \$0-scrub-bar;
#X text 219 242 Move through the soundfile with the slider above;
#X text 245 530 Creation argument is the name of the sample array to
read from., f 33;
#X floatatom 40 576 5 0 0 0 - - -;
#X obj 298 394 sigmund~ -t pitch;
#X obj 345 466 mtof;
#X obj 298 341 pack f \$0;
#X obj 117 265 t f f;
#X obj 40 539 specHarmonicity \$0-sample;
#X obj 298 436 moses 0;
#X floatatom 220 576 5 0 0 0 - - -;
#X obj 588 448 specHarmonicity~;
#X text 586 399 See the real-time version for more information on spectrum
harmonicity in general., f 33;
#X text 37 663 Outlet 1: spectrum harmonicity;
#X text 37 683 Outlet 2: spectrum inharmonicity;
#X text 37 623 Inlet 2: fundamental frequency in Hz (not MIDI!). Only
used in algorithm when "input_fund" setting is ON.;
#X msg 117 338 analyze \$1 4096;
#X msg 298 363 list \$2-sample 4096 \$1 44100 0;
#X text 665 651 Updated for timbreIDLib version 0.7.6;
#X text 665 671 August 2018;
#N canvas 351 117 1043 508 chain_messages 0;
#X msg 563 139 chain_fftData <data>;
#X msg 643 229 chain_magSpec <data>;
#X obj 427 463 outlet;
#X obj 34 159 adc~;
#X obj 34 213 tID_fft~;
#X obj 34 251 list append;
#X obj 34 310 list prepend chain_fftData;
#X obj 34 328 list trim;
#X obj 64 183 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 219 287 Prepend the "chain_fftData" message in front of the
analysis data \, then trim off the list selector to make it a message
to timbreID analysis objects., f 33;
#X text 132 192 [tID_fft~] outputs (N/2)+1 real values from the left
outlet \, and (N/2)+1 imaginary values from the right. The imaginary
values are appended to the real ones to form one long list (N+2 values
total) of complex frequency domain data., f 50;
#X text 718 138 fftData <data> should consist of (window/2)+1 real
values and (window/2)+1 imaginary values \, packaged together as one
long list., f 31;
#X text 791 222 magSpec <data> should consist of (window/2)+1 magnitudes
, f 25;
#X text 559 25 The object in this help file accepts the chain_ messages
listed below \, which should be followed by the associated data as
a single list. In practice \, these messages are prepended to analysis
results via [list prepend] \, followed by a [list trim] to remove the
list selector. This is illustrated in the example at left.;
#X text 98 15 To minimize redundant calculations on the same window
of audio \, most of timbreID's non-real-time analysis objects have
various chain_ methods. For example \, because many types of analysis
start with an FFT \, it is more efficient to do a single FFT at the
start of an analysis chain \, and pass the results to other analysis
objects that require FFT data. chain_ methods make it possible to bypass
various steps of the analysis calculation if the data is already available.
Here \, note that the FFT data originated with a real-time analysis
object \, but non-real-time objects can be used for consequent chain_
calculations.;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 4 1 5 1;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 2 0;
#X connect 8 0 4 0;
#X restore 167 459 pd chain_messages;
#X obj 667 695 declare -lib timbreID/timbreIDLib;
#X connect 0 0 20 0;
#X connect 8 0 20 0;
#X connect 9 0 20 0;
#X connect 11 0 19 0;
#X connect 12 0 4 0;
#X connect 16 0 21 0;
#X connect 17 0 20 1;
#X connect 18 0 29 0;
#X connect 19 0 28 0;
#X connect 19 1 18 0;
#X connect 20 0 15 0;
#X connect 20 1 22 0;
#X connect 21 1 17 0;
#X connect 28 0 20 0;
#X connect 29 0 16 0;
#X connect 32 0 20 0;
