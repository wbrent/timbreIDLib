#N canvas 213 81 952 595 10;
#X declare -lib timbreID/timbreIDLib;
#X obj 58 73 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 79 73 Bang to analyze the entire array.;
#X obj 58 491 nbx 7 32 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 32
-262144 -1 -1 0 256;
#X obj 703 84 specBrightness~;
#X msg 154 280 analyze \$1 1024;
#X obj 157 238 hsl 400 15 0 128000 0 0 empty empty Scrub -2 -8 0 12
-191407 -1 -1 0 1;
#X text 513 58 See the real-time version for more information on spectral
brightness in general.;
#X obj 3 3 cnv 10 400 10 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 3 3 cnv 10 10 400 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 579 220 676 525 other-settings 0;
#X obj 54 86 hradio 15 1 0 5 empty empty empty 0 -8 0 10 -262144 -1
-1 0;
#X msg 54 106 window_function \$1;
#X msg 110 168 set another-sample-array;
#X msg 149 224 samplerate 48000;
#X text 298 167 Read from a different array;
#X msg 175 277 power_spectrum \$1;
#X obj 175 259 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 54 465 outlet;
#X text 283 223 Specify your sample's sampling rate. (default: 44100)
;
#X text 316 277 Use power spectrum. (default: magnitude);
#X msg 216 322 boundary 9000;
#X text 323 322 Set boundary frequency (default: 1200);
#X msg 266 372 print;
#X text 52 49 Change windowing function. Rectangular (0) \, Blackman
(1) \, Cosine (2) \, Hamming (3) \, or Hann (4). (default: Blackman)
;
#X text 186 136 Change internal window size setting;
#X msg 84 136 window 2000;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 7 0;
#X connect 3 0 7 0;
#X connect 5 0 7 0;
#X connect 6 0 5 0;
#X connect 10 0 7 0;
#X connect 12 0 7 0;
#X connect 15 0 7 0;
#X restore 206 312 pd other-settings;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-waveform 1024 float 0;
#X coords 0 1 1023 -1 200 140 1 0 0;
#X restore 652 246 graph;
#N canvas 666 270 552 163 soundfile 0;
#X obj 50 103 soundfiler;
#X msg 50 78 read -skip 120000 ./audio/testing.wav \$1-sample;
#X obj 185 120 table \$0-sample 130000;
#X obj 50 24 loadbang;
#X obj 50 46 f \$0;
#X connect 1 0 0 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X restore 652 396 pd soundfile;
#N canvas 722 238 369 330 waveform 0;
#X obj 46 61 inlet;
#X obj 46 82 t f f;
#X obj 46 284 outlet;
#X obj 131 131 + 1023;
#X msg 86 200 copy_range 0 \$3-sample \$1 \$2;
#X obj 86 164 pack f f \$0;
#X obj 86 241 tabletool \$0-waveform;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 0 5 0;
#X connect 1 1 3 0;
#X connect 3 0 5 1;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X restore 154 258 pd waveform;
#X obj 58 452 specBrightness \$0-sample 1200;
#X text 106 142 Analyze a window starting at sample 44100 that is 2000
samples long (samples 44100 - 46099).;
#X msg 97 122 analyze 44100 2000;
#X text 278 441 Creation arguments are the name of the sample array
to read from \, and a boundary frequency to determine the ratio of
high spectral content., f 47;
#X text 661 523 Updated for timbreIDLib version 0.7.6;
#X text 661 543 August 2018;
#N canvas 351 117 1043 508 chain_messages 0;
#X msg 563 139 chain_fftData <data>;
#X msg 643 229 chain_magSpec <data>;
#X obj 427 463 outlet;
#X obj 34 159 adc~;
#X obj 34 213 tID_fft~;
#X obj 34 251 list append;
#X obj 34 310 list prepend chain_fftData;
#X obj 34 328 list trim;
#X obj 64 183 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 219 287 Prepend the "chain_fftData" message in front of the
analysis data \, then trim off the list selector to make it a message
to timbreID analysis objects., f 33;
#X text 132 192 [tID_fft~] outputs (N/2)+1 real values from the left
outlet \, and (N/2)+1 imaginary values from the right. The imaginary
values are appended to the real ones to form one long list (N+2 values
total) of complex frequency domain data., f 50;
#X text 718 138 fftData <data> should consist of (window/2)+1 real
values and (window/2)+1 imaginary values \, packaged together as one
long list., f 31;
#X text 791 222 magSpec <data> should consist of (window/2)+1 magnitudes
, f 25;
#X text 559 25 The object in this help file accepts the chain_ messages
listed below \, which should be followed by the associated data as
a single list. In practice \, these messages are prepended to analysis
results via [list prepend] \, followed by a [list trim] to remove the
list selector. This is illustrated in the example at left.;
#X text 98 15 To minimize redundant calculations on the same window
of audio \, most of timbreID's non-real-time analysis objects have
various chain_ methods. For example \, because many types of analysis
start with an FFT \, it is more efficient to do a single FFT at the
start of an analysis chain \, and pass the results to other analysis
objects that require FFT data. chain_ methods make it possible to bypass
various steps of the analysis calculation if the data is already available.
Here \, note that the FFT data originated with a real-time analysis
object \, but non-real-time objects can be used for consequent chain_
calculations.;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 4 1 5 1;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 2 0;
#X connect 8 0 4 0;
#X restore 236 342 pd chain_messages;
#X obj 662 565 declare -lib timbreID/timbreIDLib;
#X connect 0 0 13 0;
#X connect 4 0 13 0;
#X connect 5 0 12 0;
#X connect 9 0 13 0;
#X connect 12 0 4 0;
#X connect 13 0 2 0;
#X connect 15 0 13 0;
#X connect 19 0 13 0;
