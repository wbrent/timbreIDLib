#N canvas 234 81 874 668 10;
#X declare -lib timbreIDLib;
#X obj 50 310 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-waveform 64 float 0;
#X coords 0 1 63 -1 200 140 1 0 0;
#X restore 47 47 graph;
#X text 72 307 Bang to analyze the entire array.;
#N canvas 666 270 482 216 soundfile 0;
#X obj 50 103 soundfiler;
#X obj 50 24 loadbang;
#X obj 185 120 table \$0-sample 130000;
#X msg 50 78 read -skip 120000 ./audio/testing.wav \$1-sample;
#X obj 50 46 f \$0;
#X connect 1 0 4 0;
#X connect 3 0 0 0;
#X connect 4 0 3 0;
#X restore 655 86 pd soundfile;
#N canvas 1126 218 326 321 waveform 0;
#X obj 46 61 inlet;
#X obj 46 82 t f f;
#X msg 46 200 copy_range 0 \$3-sample \$1 \$2;
#X obj 46 164 pack f f \$0;
#X obj 46 241 tabletool \$0-waveform;
#X obj 91 131 + 63;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 1 1 5 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 5 0 3 1;
#X restore 655 138 pd waveform;
#X obj 50 243 hsl 800 25 53700 54500 0 0 \$0-scrub-bar empty Scrub-bar
-2 -8 0 12 -191407 -1 -1 0 1;
#X obj 3 3 cnv 10 400 10 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 3 3 cnv 10 10 400 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 608 189 746 483 other-settings 0;
#X obj 44 56 hradio 15 1 0 5 empty empty empty 0 -8 0 10 -262144 -1
-1 4;
#X msg 44 76 window_function \$1;
#X msg 144 176 set another-sample-array;
#X msg 183 232 samplerate 48000;
#X text 332 175 Read from a different array;
#X obj 44 415 outlet;
#X text 317 231 Specify your sample's sampling rate. (default: 44100)
;
#X msg 233 282 print;
#X text 42 19 Change windowing function. Rectangular (0) \, Blackman
(1) \, Cosine (2) \, Hamming (3) \, or Hann (4). (default: Blackman)
;
#X text 283 284 Print current settings in the post window;
#X text 196 126 Change internal window size setting;
#X msg 94 126 window 2000;
#X connect 0 0 1 0;
#X connect 1 0 5 0;
#X connect 2 0 5 0;
#X connect 3 0 5 0;
#X connect 7 0 5 0;
#X connect 11 0 5 0;
#X restore 152 498 pd other-settings;
#X msg 94 379 analyze 44100 2000;
#X obj 107 433 r \$0-scrub-bar;
#X obj 655 116 r \$0-scrub-bar;
#X text 235 438 Move through the soundfile with the slider above,
f 28;
#N canvas 205 170 463 267 do-plotting 0;
#X obj 79 37 inlet;
#X obj 79 173 list prepend 0;
#X obj 233 116 list length;
#X obj 233 138 change;
#X obj 233 160 pack f \$0;
#X obj 79 59 t l l;
#X msg 233 181 \; \$2-phaseSpec-graph resize \$1 \;;
#X obj 79 194 s \$0-phaseSpec-graph;
#X connect 0 0 5 0;
#X connect 1 0 7 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 5 0 1 0;
#X connect 5 1 2 0;
#X restore 50 622 pd do-plotting;
#X text 213 580 Creation argument is the name of the sample array to
read from., f 33;
#X text 92 345 Analyze a window starting at sample 44100 that is 2000
samples long (samples 44100 - 46099).;
#N canvas 0 50 450 300 (subpatch) 0;
#X array \$0-phaseSpec-graph 33 float 2;
#X coords 0 3.15 33 -3.15 200 140 1 0 0;
#X restore 317 47 graph;
#X text 546 36 pi;
#X text 543 179 -pi;
#X text 627 592 Updated for timbreIDLib version 0.7.6;
#X text 627 612 August 2018;
#X msg 107 455 analyze \$1 64;
#N canvas 351 117 1043 508 chain_messages 0;
#X msg 563 139 chain_fftData <data>;
#X obj 427 463 outlet;
#X obj 34 159 adc~;
#X obj 34 213 tID_fft~;
#X obj 34 251 list append;
#X obj 34 310 list prepend chain_fftData;
#X obj 34 328 list trim;
#X obj 64 183 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 219 287 Prepend the "chain_fftData" message in front of the
analysis data \, then trim off the list selector to make it a message
to timbreID analysis objects., f 33;
#X text 132 192 [tID_fft~] outputs (N/2)+1 real values from the left
outlet \, and (N/2)+1 imaginary values from the right. The imaginary
values are appended to the real ones to form one long list (N+2 values
total) of complex frequency domain data., f 50;
#X text 718 138 fftData <data> should consist of (window/2)+1 real
values and (window/2)+1 imaginary values \, packaged together as one
long list., f 31;
#X text 559 25 The object in this help file accepts the chain_ messages
listed below \, which should be followed by the associated data as
a single list. In practice \, these messages are prepended to analysis
results via [list prepend] \, followed by a [list trim] to remove the
list selector. This is illustrated in the example at left.;
#X text 98 15 To minimize redundant calculations on the same window
of audio \, most of timbreID's non-real-time analysis objects have
various chain_ methods. For example \, because many types of analysis
start with an FFT \, it is more efficient to do a single FFT at the
start of an analysis chain \, and pass the results to other analysis
objects that require FFT data. chain_ methods make it possible to bypass
various steps of the analysis calculation if the data is already available.
Here \, note that the FFT data originated with a real-time analysis
object \, but non-real-time objects can be used for consequent chain_
calculations.;
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 1 4 1;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 1 0;
#X connect 7 0 3 0;
#X restore 182 528 pd chain_messages;
#X obj 50 586 phaseSpec \$0-sample;
#X obj 598 438 phaseSpec~;
#X text 596 389 See the real-time version for more information on phase
spectrum in general., f 33;
#X obj 628 635 declare -lib timbreIDLib;
#X connect 0 0 23 0;
#X connect 8 0 23 0;
#X connect 9 0 23 0;
#X connect 10 0 21 0;
#X connect 11 0 4 0;
#X connect 21 0 23 0;
#X connect 22 0 23 0;
#X connect 23 0 13 0;
